stages:
 - build
 - publish

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"


# TODO: split into build and publish
build-backend:
  image: docker:stable
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  before_script:
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  script:
    - "cd backend"
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building backend version $VERSION"
    - "docker build -t $CI_REGISTRY/landscape/omnikeeper/backend:$VERSION -t $CI_REGISTRY/landscape/omnikeeper/backend:latest -f ./Omnikeeper/Dockerfile --build-arg version=$VERSION ."
    - "docker push $CI_REGISTRY/landscape/omnikeeper/backend"

    

build-publish-frontend-okplugin-generic-json-ingest:
  extends: .build-publish-frontend-okplugin
  variables:
    PLUGIN_FOLDER: "okplugin-generic-json-ingest"
# TODO: split into build and publish?
.build-publish-frontend-okplugin:
  image: node:13.12.0-alpine
  stage: build
  when: on_success
  variables:  
    NEXUS_REPOURL: "repo.mhx.at/repository/npm-stable-hosted/"
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - cd frontend/$PLUGIN_FOLDER
    - npm config set unsafe-perm true # needed, so 'prepublishOnly' runs properly (see https://tinyurl.com/npmUnsafePerm)
    - npm ci
    - |- 
      cat <<'EOF' > .npmrc
      //${NEXUS_REPOURL}:_authToken=${NPM_REPO_PUBLISH_TOKEN}
      EOF
    - npm version $CI_COMMIT_TAG # set version
    - npm publish

    
    
build-backend-base:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building nuget package for omnikeeper base version $VERSION"
    - dotnet nuget update source "MHX nuget Repository" --username "$NUGET_REPO_USER" --password "$NUGET_REPO_PASS" --store-password-in-clear-text --configfile backend/NuGet.Config
    - dotnet pack backend/Omnikeeper.Base/Omnikeeper.Base.csproj /p:Version=$VERSION -c Release
    - mv backend/Omnikeeper.Base/bin/Release/Omnikeeper.Base.$VERSION.nupkg Omnikeeper.Base.nupkg
  artifacts:
    paths:
      - Omnikeeper.Base.nupkg
    expire_in: 2 days
publish-backend-base:
  image: docker-registry.mhx.at/infra-docker/container-images/push-to-nexus-nuget:latest
  stage: publish
  when: on_success
  needs: ["build-backend-base"]
  variables:
    NEXUS_BASEURL: "https://repo.mhx.at"
    PACKAGE_NAME: "Omnikeeper.Base"
  script:
    - sh /upload-nuget.sh Omnikeeper.Base.nupkg
  only: 
    - tags


build-backend-okplugin-active-directory-xml-ingest:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginActiveDirectoryXMLIngest"
publish-backend-okplugin-active-directory-xml-ingest:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-active-directory-xml-ingest"]
  variables:
    PACKAGE_NAME: "OKPluginActiveDirectoryXMLIngest"

build-backend-okplugin-ansible-inventory-scan-ingest:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginAnsibleInventoryScanIngest"
publish-backend-okplugin-ansible-inventory-scan-ingest:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-ansible-inventory-scan-ingest"]
  variables:
    PACKAGE_NAME: "OKPluginAnsibleInventoryScanIngest"

build-backend-okplugin-clb-monitoring:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginCLBMonitoring"
publish-backend-okplugin-clb-monitoring:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-clb-monitoring"]
  variables:
    PACKAGE_NAME: "OKPluginCLBMonitoring"

build-backend-okplugin-oia-keycloak:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginOIAKeycloak"
publish-backend-okplugin-oia-keycloak:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-oia-keycloak"]
  variables:
    PACKAGE_NAME: "OKPluginOIAKeycloak"
    
build-backend-okplugin-oia-omnikeeper:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginOIAOmnikeeper"
publish-backend-okplugin-oia-omnikeeper:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-oia-omnikeeper"]
  variables:
    PACKAGE_NAME: "OKPluginOIAOmnikeeper"

build-backend-okplugin-oia-sharepoint:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginOIASharepoint"
publish-backend-okplugin-oia-sharepoint:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-oia-sharepoint"]
  variables:
    PACKAGE_NAME: "OKPluginOIASharepoint"

build-backend-okplugin-generic-json-ingest:
  extends: .build-backend-okplugin
  variables:
    PLUGIN_NAME: "OKPluginGenericJSONIngest"
publish-backend-okplugin-generic-json-ingest:
  extends: ".publish-backend-okplugin"
  needs: ["build-backend-okplugin-generic-json-ingest"]
  variables:
    PACKAGE_NAME: "OKPluginGenericJSONIngest"
    


.build-backend-okplugin:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building nuget package for omnikeeper plugin $PLUGIN_NAME $VERSION"
    - dotnet nuget update source "MHX nuget Repository" --username "$NUGET_REPO_USER" --password "$NUGET_REPO_PASS" --store-password-in-clear-text --configfile backend/NuGet.Config
    - dotnet pack backend/$PLUGIN_NAME/$PLUGIN_NAME.csproj /p:Version=$VERSION -c Release
    - mv backend/$PLUGIN_NAME/bin/Release/$PLUGIN_NAME.$VERSION.nupkg $PLUGIN_NAME.nupkg
  artifacts:
    paths:
      - $PLUGIN_NAME.nupkg
    expire_in: 2 days
.publish-backend-okplugin:
  image: docker-registry.mhx.at/infra-docker/container-images/push-to-nexus-nuget:latest
  stage: publish
  when: on_success
  variables:
    NEXUS_BASEURL: "https://repo.mhx.at"
  script:
    - sh /upload-nuget.sh $PACKAGE_NAME.nupkg
  only: 
    - tags


build-swagger-definition:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - "cd backend"
    - dotnet nuget remove source "MHX nuget Repository"  # HACK: we need to remove the internal repo, nuget is stupid :(
    - dotnet build "Omnikeeper/Omnikeeper.csproj" -c Release
    - "cd Omnikeeper"
    - "dotnet tool restore"
    - dotnet swagger tofile --output ../../omnikeeper.json ./bin/Release/netcoreapp3.1/Omnikeeper.dll v1
  artifacts:
    paths:
      - omnikeeper.json
    expire_in: 2 days

publish-client-library-go:
  image:  docker:stable
  stage: publish
  when: on_success
  needs: ["build-swagger-definition"]
  services:
    - docker:19.03.1-dind
  script:
    - "apk add git jq"
    - "cd clients/scripts/go"
    - sh generate_publish.sh landscape omnikeeper-client-go "Update to version $CI_COMMIT_TAG" www.mhx.at/gitlab ../../../omnikeeper.json $CI_COMMIT_TAG
  only: 
    - tags
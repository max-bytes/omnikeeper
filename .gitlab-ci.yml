stages:
 - build
 - publish

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"


# TODO: split into build and publish
build-backend:
  image: docker:stable
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  before_script:
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  script:
    - "cd backend"
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building backend version $VERSION"
    - "docker build -t $CI_REGISTRY/landscape/omnikeeper/backend:$VERSION -t $CI_REGISTRY/landscape/omnikeeper/backend:latest -f ./Omnikeeper/Dockerfile --build-arg version=$VERSION ."
    - "docker push $CI_REGISTRY/landscape/omnikeeper/backend"

# TODO: split into build and publish
build-frontend:
  image: docker:stable
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  before_script:
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  script:
    - "cd frontend"
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building frontend version $VERSION"
    - "docker build -t $CI_REGISTRY/landscape/omnikeeper/frontend:$VERSION -t $CI_REGISTRY/landscape/omnikeeper/frontend:latest --build-arg version=$VERSION --build-arg npm_repo_key=$NPM_REPO_KEY ."
    - "docker push $CI_REGISTRY/landscape/omnikeeper/frontend"
    

build-nuget-package-base:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building nuget package for omnikeeper base version $VERSION"
    - dotnet nuget update source "MHX nuget Repository" --username "$NUGET_REPO_USER" --password "$NUGET_REPO_PASS" --store-password-in-clear-text --configfile backend/NuGet.Config
    - dotnet pack backend/Omnikeeper.Base/Omnikeeper.Base.csproj /p:Version=$VERSION -c Release
    - mv backend/Omnikeeper.Base/bin/Release/Omnikeeper.Base.$VERSION.nupkg Omnikeeper.Base.nupkg
  artifacts:
    paths:
      - Omnikeeper.Base.nupkg
    expire_in: 2 days
publish-nuget-package-base:
  image: docker-registry.mhx.at/infra-docker/container-images/push-to-nexus-nuget:latest
  stage: publish
  when: on_success
  needs: ["build-nuget-package-base"]
  variables:
    NEXUS_BASEURL: "https://repo.mhx.at"
    PACKAGE_NAME: "Omnikeeper.Base"
  script:
    - sh /upload-nuget.sh Omnikeeper.Base.nupkg
  only: 
    - tags


.build-nuget-package-okplugin:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
  stage: build
  when: on_success
  tags:
    - dockerbuild
  services:
    - docker:19.03.1-dind
  only: 
    - tags
  script:
    - "VERSION=$CI_COMMIT_TAG"
    - echo "Building nuget package for omnikeeper plugin $PLUGIN_NAME $VERSION"
    - dotnet nuget update source "MHX nuget Repository" --username "$NUGET_REPO_USER" --password "$NUGET_REPO_PASS" --store-password-in-clear-text --configfile backend/NuGet.Config
    - dotnet pack backend/$PLUGIN_NAME/$PLUGIN_NAME.csproj /p:Version=$VERSION -c Release
    - mv backend/$PLUGIN_NAME/bin/Release/$PLUGIN_NAME.$VERSION.nupkg $PLUGIN_NAME.nupkg
  artifacts:
    paths:
      - $PLUGIN_NAME.nupkg
    expire_in: 2 days

build-nuget-package-okplugin-active-directory-xml-ingest:
  extends: .build-nuget-package-okplugin
  variables:
    PLUGIN_NAME: "OKPluginActiveDirectoryXMLIngest"

#build-nuget-package-okplugin-active-directory-xml-ingest:
#  image: mcr.microsoft.com/dotnet/core/sdk:3.1-buster
#  stage: build
#  when: on_success
#  tags:
#    - dockerbuild
#  services:
#    - docker:19.03.1-dind
#  only: 
#    - tags
#  script:
#    - "VERSION=$CI_COMMIT_TAG"
#    - echo "Building nuget package for omnikeeper plugin ActiveDirectoryXMLIngest $VERSION"
#    - dotnet nuget update source "MHX nuget Repository" --username "${NUGET_REPO_USER}" --password "${NUGET_REPO_PASS}" --store-password-in-clear-text --configfile backend/NuGet.Config
#    - dotnet pack backend/OKPluginActiveDirectoryXMLIngest/OKPluginActiveDirectoryXMLIngest.csproj /p:Version=${VERSION} -c Release
#    - mv backend/OKPluginActiveDirectoryXMLIngest/bin/Release/OKPluginActiveDirectoryXMLIngest.${VERSION}.nupkg OKPluginActiveDirectoryXMLIngest.nupkg
#  artifacts:
#    paths:
#      - OKPluginActiveDirectoryXMLIngest.nupkg
#    expire_in: 2 days
publish-nuget-package-okplugin-active-directory-xml-ingest:
  image: docker-registry.mhx.at/infra-docker/container-images/push-to-nexus-nuget:latest
  stage: publish
  when: on_success
  needs: ["build-nuget-package-okplugin-active-directory-xml-ingest"]
  variables:
    NEXUS_BASEURL: "https://repo.mhx.at"
    PACKAGE_NAME: "OKPluginActiveDirectoryXMLIngest"
  script:
    - sh /upload-nuget.sh OKPluginActiveDirectoryXMLIngest.nupkg
  only: 
    - tags
name: CI

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
       

  build-publish-backend-base:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and publish
        run: |
          cd backend
          dotnet nuget update source "Github nuget Repository" --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text
          dotnet pack Omnikeeper.Base/Omnikeeper.Base.csproj /p:Version=${{ env.VERSION }} -c Release
          dotnet nuget push "Omnikeeper.Base/bin/Release/Omnikeeper.Base.${{ env.VERSION }}.nupkg" --source "Github nuget Repository"

  build-backend-vanilla: # backend docker container without plugins
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/core/backend
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: "./backend"
          file: "./backend/Omnikeeper/Dockerfile"
          push: true
          build-args: |
            version=${{ env.VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-publish-frontend-okplugin-generic-json-ingest:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and publish
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOURL: npm.pkg.github.com/
          PLUGIN_FOLDER: okplugin-generic-json-ingest
        run: |
            cd frontend/$PLUGIN_FOLDER
            npm config set unsafe-perm true # needed, so 'prepublishOnly' runs properly (see https://tinyurl.com/npmUnsafePerm)
            npm ci
            cat <<'EOF' > .npmrc
            //${REPOURL}:_authToken=${ACCESS_TOKEN}
            @maximiliancsuk:registry=https://npm.pkg.github.com
            EOF
            npm version ${{ env.VERSION }} # set version
            npm publish

  build-publish-backend-okplugins:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and publish
        run: |
          cd backend
          dotnet nuget update source "Github nuget Repository" --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text
          function buildPublish () {
            dotnet pack $1/$1.csproj /p:Version=${{ env.VERSION }} -c Release
            dotnet nuget push "$1/bin/Release/$1.${{ env.VERSION }}.nupkg" --source "Github nuget Repository"
          }
          buildPublish OKPluginGenericJSONIngest
          buildPublish OKPluginOIASharepoint
          buildPublish OKPluginOIAOmnikeeper
          buildPublish OKPluginOIAKeycloak
          buildPublish OKPluginCLBMonitoring
          buildPublish OKPluginAnsibleInventoryScanIngest
          buildPublish OKPluginActiveDirectoryXMLIngest

  build-swagger-definition:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build
        run: |
            # TODO, HACK: we haven't found a good way to generate client APIs for plugin endpoints, so we fallback to a static swagger definition file
            cp clients/source/omnikeeper_static.json omnikeeper.json
            #  HACK: commented out code for dynamically creating a swagger definition file
            # cd backend
            # dotnet nuget remove source "MHX nuget Repository"  # HACK: we need to remove the internal repo, nuget is stupid :(
            # dotnet build "Omnikeeper/Omnikeeper.csproj" -c Release
            # cd Omnikeeper
            # dotnet tool restore
            # dotnet swagger tofile --output ../../omnikeeper.json ./bin/Release/netcoreapp3.1/Omnikeeper.dll v1
      - uses: actions/upload-artifact@v2
        with:
          name: omnikeeper-swagger-json
          path: omnikeeper.json
  publish-client-libraries:
    runs-on: ubuntu-20.04
    needs: build-swagger-definition
    env:
      ACCESS_TOKEN_REPO_CLIENT_GO: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          name: omnikeeper-swagger-json
      - name: Build
        run: |
          bash clients/scripts/go/generate_publish.sh github.com omnikeeper.json ${{ env.VERSION }} "maximiliancsuk" "${{ secrets.CLIENT_LIBRARY_DEPLOY_TOKEN_GO }}"
          bash clients/scripts/python/generate_publish.sh github.com omnikeeper.json ${{ env.VERSION }} "maximiliancsuk" "${{ secrets.CLIENT_LIBRARY_DEPLOY_TOKEN_PYTHON }}"
          bash clients/scripts/java/generate_publish.sh github.com omnikeeper.json ${{ env.VERSION }} "maximiliancsuk" "${{ secrets.CLIENT_LIBRARY_DEPLOY_TOKEN_JAVA }}"
          bash clients/scripts/powershell/generate_publish.sh github.com omnikeeper.json ${{ env.VERSION }} "maximiliancsuk" "${{ secrets.CLIENT_LIBRARY_DEPLOY_TOKEN_POWERSHELL }}"

  build-publish-variant-frontend-mhx-internal:
    runs-on: ubuntu-20.04
    env:
      VARIANT_NAME: mhx-internal
      # TODO: replace hardcoded version numbers by variables
      BASE_VERSION: 0.14.17
      PLUGINS_BACKEND: OKPluginGenericJSONIngest:0.14.34;OKPluginActiveDirectoryXMLIngest:0.14.34;OKPluginAnsibleInventoryScanIngest:0.14.34;OKPluginCLBMonitoring:0.14.34;OKPluginOIAKeycloak:0.14.34;OKPluginOIAOmnikeeper:0.14.34;OKPluginOIASharepoint:0.14.34;
      PLUGINS_FRONTEND: "okplugin-generic-json-ingest@0.14.39" # syntax: pluginA@version pluginB@version ...
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for docker backend
        id: meta_backend
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/variants/backend/${{ env.VARIANT_NAME }}
      - name: Set final version
        run: |
          # create plugin hash from plugins string
          PLUGIN_HASH=`echo $PLUGINS_FRONTEND | md5sum | cut -f1 -d" " | cut -c1-10`

          # NOTE: according to semver, we should use a '+', followed by the plugin hash to specify the "build-metadata"
          # but docker image tags do not allow '+', so we use a '-' instead
          echo "FINAL_VERSION=${BASE_VERSION}-${PLUGIN_HASH}" >> $GITHUB_ENV
      - name: Setup backend build
        run: |
          mkdir -p build-backend
          cp backend/Omnikeeper/Dockerfile_AddedOKPlugins build-backend/Dockerfile
      - name: Download backend plugins
        run: |
          echo "Fetching plugins..."
          mkdir -p backend-build/OKPlugins
          plugins=$(echo $PLUGINS_BACKEND | tr ";" "\n")
          for plugin in $plugins
          do
              pluginArray=(`echo $plugin | tr ":" "\n"`)
              pluginName=${pluginArray[0]}
              pluginVersion=${pluginArray[1]}
              echo "Fetching plugin $pluginName version $pluginVersion"
              curl --fail -L -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} https://nuget.pkg.github.com/maximiliancsuk/download/$pluginName/$pluginVersion/$pluginName.$pluginVersion.nupkg --output build-backend/OKPlugins/$pluginName-$pluginVersion.nupkg
          done
          echo "Done fetching plugins"
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: "./build-backend"
          file: "./build-backend/Dockerfile"
          push: true
          # TODO: properly set base image
          build-args: |
            base_image=ghcr.io/maximiliancsuk/omnikeeper/core/backend:${{ env.BASE_VERSION }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
      # - name: Extract metadata (tags, labels) for docker frontend
      #   id: meta_frontend
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/variants/frontend/${{ env.VARIANT_NAME }}
      # - name: Build and push frontend Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: "./frontend/core"
      #     file: "./frontend/core/cicd/Dockerfile"
      #     push: true
      #     build-args: |
      #       version=${{ env.FINAL_VERSION }}
      #       plugins=${{ env.PLUGINS_FRONTEND }}
      #       npm_repo_key=${{ secrets.GITHUB_TOKEN }}
      #     tags: ${{ steps.meta_frontend.outputs.tags }}
      #     labels: ${{ steps.meta_frontend.outputs.labels }}
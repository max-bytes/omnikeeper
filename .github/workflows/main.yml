name: CI

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-publish-frontend-okplugin-generic-json-ingest:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and publish
        env:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOURL: https://npm.pkg.github.com
          PLUGIN_FOLDER: okplugin-generic-json-ingest
        run: |
            echo "***$PLUGIN_FOLDER***$REPOURL***${#ACCESS_TOKEN}***${{ env.VERSION }}***"
            cd frontend/$PLUGIN_FOLDER
            npm config set unsafe-perm true # needed, so 'prepublishOnly' runs properly (see https://tinyurl.com/npmUnsafePerm)
            npm ci
            cat <<'EOF' > .npmrc
            //${REPOURL}:_authToken=${ACCESS_TOKEN}
            @maximiliancsuk:registry=https://npm.pkg.github.com
            EOF
            npm version ${{ env.VERSION }} # set version
            npm publish

  build-publish-backend-okplugins:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build and publish
        run: |
          cd backend
          dotnet nuget update source "Github nuget Repository" --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text
          function buildPublish () {
            dotnet pack $1/$1.csproj /p:Version=${{ env.VERSION }} -c Release
            dotnet nuget push "$1/bin/Release/$1.${{ env.VERSION }}.nupkg" --source "Github nuget Repository"
          }
          buildPublish OKPluginGenericJSONIngest
          buildPublish OKPluginOIASharepoint
          buildPublish OKPluginOIAOmnikeeper
          buildPublish OKPluginOIAKeycloak
          buildPublish OKPluginCLBMonitoring
          buildPublish OKPluginAnsibleInventoryScanIngest
          buildPublish OKPluginActiveDirectoryXMLIngest
          

  build-backend:
    if: ${{ false }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set version
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/core/backend
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: "./backend"
          file: "./backend/Omnikeeper/Dockerfile"
          push: true
          build-args: |
            version=${{ env.VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
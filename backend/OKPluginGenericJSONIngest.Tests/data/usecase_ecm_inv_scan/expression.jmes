{
	cis: [
		[?document == 'inventory_scan_linux'] | [0].data[].{
			tempID: ciid(cmdbid),
			idMethod: idMethodByData(['cmdb.host.id']),
			attributes: [
				attribute('__name', join(' - ', [cmdbid, report.system.name || ''])),
				
				attribute('cmdb.host.id', cmdbid),

				attribute('ecm_inv_scan.linux.configuration_files.nrpe', report.configurationFiles[?category == 'NRPE'].content | [0], 'MultilineText'),

				attribute('ecm_inv_scan.linux.machine_info.chassis', report.machineInfo.chassis),
				attribute('ecm_inv_scan.linux.machine_info.identifying_number', to_string(report.machineInfo.identifyingNumber)),
				attribute('ecm_inv_scan.linux.machine_info.manufacturer', report.machineInfo.manufacturer),
				attribute('ecm_inv_scan.linux.machine_info.platform', report.machineInfo.platform),
				attribute('ecm_inv_scan.linux.machine_info.processor_type', report.machineInfo.processorType),
				attribute('ecm_inv_scan.linux.machine_info.product_name', report.machineInfo.productName),
				attribute('ecm_inv_scan.linux.machine_info.serial_number', report.machineInfo.serialNumber),
				attribute('ecm_inv_scan.linux.machine_info.uuid', report.machineInfo.uuid),

				attribute('ecm_inv_scan.linux.memory.available_mb', to_string(report.memory.availableMb)),
				attribute('ecm_inv_scan.linux.memory.total_size_mb', to_string(report.memory.totalSizeMb)),

				attribute('ecm_inv_scan.linux.network.dns_servers', report.network.dns.servers),

				attribute('ecm_inv_scan.linux.ntp_servers', report.ntp.servers, 'JSON'),

				attribute('ecm_inv_scan.linux.operating_system.name', report.operatingSystem.name),
				attribute('ecm_inv_scan.linux.operating_system.os_family', report.operatingSystem.osFamily),
				attribute('ecm_inv_scan.linux.operating_system.platform', report.operatingSystem.platform),
				attribute('ecm_inv_scan.linux.operating_system.release', report.operatingSystem.release),
				attribute('ecm_inv_scan.linux.operating_system.release_name', report.operatingSystem.releaseName),
				attribute('ecm_inv_scan.linux.operating_system.version', to_string(report.operatingSystem.version)),

				attribute('ecm_inv_scan.linux.processors.cores_per_cpu', report.processor.coresPerCpu, 'Integer'),
				attribute('ecm_inv_scan.linux.processors.logical_processors', report.processor.logicalProcessors, 'Integer'),
				attribute('ecm_inv_scan.linux.processors.number_of_cpus', report.processor.numberOfCpus, 'Integer'),
				attribute('ecm_inv_scan.linux.processors.physical_processors', report.processor.physicalProcessors, 'Integer'),
				attribute('ecm_inv_scan.linux.processors.total_cores', report.processor.totalCores, 'Integer'),

				attribute('ecm_inv_scan.linux.scan_time', report.report.scanDateUTC),

				attribute('ecm_inv_scan.linux.system.application_architecture', report.system.applicationArchitecture),
				attribute('ecm_inv_scan.linux.system.hostname_domain', report.system.hostnameDomain),
				attribute('ecm_inv_scan.linux.system.hostname_fqdn', report.system.hostnameFqdn),
				attribute('ecm_inv_scan.linux.system.install_date', report.system.installDate),
				attribute('ecm_inv_scan.linux.system.kernel_architecture', report.system.kernelArchitecture),
				attribute('ecm_inv_scan.linux.system.kernel_bit_size', to_string(report.system.kernelBitSize)),
				attribute('ecm_inv_scan.linux.system.kernel_name', report.system.kernelName),
				attribute('ecm_inv_scan.linux.system.kernel_release', report.system.kernelRelease),
				attribute('ecm_inv_scan.linux.system.last_reboot_time', report.system.lastRebootDate),
				attribute('ecm_inv_scan.linux.system.name', report.system.name)
			]
		},
		[?document == 'inventory_scan_linux'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.network.interfaces[?description != 'lo' && description != 'lo0'].{
				tempID: ciid(retrieve('cmdbid'), 'network_interface', idx(join('_',[retrieve('cmdbid'),'network_interface']))),
				idMethod: idMethodByIntersect([
					idMethodByUnion([
						[
							idMethodByAttribute(attribute('cmdb.interface.hwaddress', macAddress)),
							idMethodByAttribute(attribute('cmdb.interface.hwaddress', stringReplace(macAddress, ':', '')))
						],
						map(&idMethodByAttribute(attribute('cmdb.interface.ip', address)), not_null(ips[], `[]`)),
						[
							idMethodByAttribute(attribute('cmdb.interface.name', description), {caseInsensitive: `true`})
						],
						[
							idMethodByData(['ecm_inv_scan.linux.network_interface.mac_address', 'ecm_inv_scan.linux.network_interface.description'])
						]
					] | []),
					idMethodByRelatedTempID(['<', 'has_interface'], ciid(retrieve('cmdbid')))
				]),
				attributes: [
					attribute('__name', join(' - ', ['Linux Network Interface', description || ''])),
					attribute('ecm_inv_scan.linux.network_interface.description', description || ''),
					attribute('ecm_inv_scan.linux.network_interface.mac_address', macAddress || ''),
					
					attribute('ecm_inv_scan.linux.network_interface.ips', ips, 'JSON')
				]
			}
		} | [].tmp | [],
		[?document == 'inventory_scan_linux'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.storage.partitions[].{
				tempID: ciid(retrieve('cmdbid'), 'linux_partition', idx(join('_',[retrieve('cmdbid'),'linux_partition']))),
				idMethod: idMethodByIntersect([
					idMethodByUnion(
						[
							idMethodByData(['ecm_inv_scan.linux.partition.device', 'ecm_inv_scan.linux.partition.mount_point'])
						]),
					idMethodByRelatedTempID(['<', 'has_mounted_partition'], ciid(retrieve('cmdbid')))
				]),
				attributes: [
					attribute('__name', join(' - ', ['Linux Partition', device])),
					attribute('ecm_inv_scan.linux.partition.device', device),
					attribute('ecm_inv_scan.linux.partition.file_system_type', filesystemType),
					attribute('ecm_inv_scan.linux.partition.mount_options', mountOptions),
					attribute('ecm_inv_scan.linux.partition.mount_point', mountPoint || ''),
					attribute('ecm_inv_scan.linux.partition.size_kb', to_string(sizeKb)),
					attribute('ecm_inv_scan.linux.partition.free_kb', to_string(freeKb)),
					attribute('ecm_inv_scan.linux.partition.used_kb', to_string(usedKb))
				]
			}
		} | [].tmp | [],


		[?document == 'inventory_scan_windows'] | [0].data[].{
			tempID: ciid(cmdbid),
			idMethod: idMethodByData(['cmdb.host.id']),
			attributes: [
				attribute('__name', join(' - ', [cmdbid, report.system.dnsHostname || ''])),
				
				attribute('cmdb.host.id', cmdbid),

				attribute('ecm_inv_scan.win.scan_time', report.scantime),

				attribute('ecm_inv_scan.win.operating_system.name', report.operatingsystem.name),
				attribute('ecm_inv_scan.win.operating_system.servicepack', report.operatingsystem.servicepack),
				attribute('ecm_inv_scan.win.operating_system.last_bootup_time', report.operatingsystem.lastbootuptime),
				attribute('ecm_inv_scan.win.operating_system.install_date', report.operatingsystem.installdate),
				attribute('ecm_inv_scan.win.operating_system.architecture', report.operatingsystem.architecture),
				attribute('ecm_inv_scan.win.operating_system.language', report.operatingsystem.language),
				attribute('ecm_inv_scan.win.operating_system.product_suite', report.operatingsystem.productsuite),
				attribute('ecm_inv_scan.win.operating_system.type', report.operatingsystem.type),
				attribute('ecm_inv_scan.win.operating_system.version', report.operatingsystem.version),
				attribute('ecm_inv_scan.win.operating_system.build_number', report.operatingsystem.buildnumber),
				attribute('ecm_inv_scan.win.operating_system.codeset', report.operatingsystem.codeset),
				attribute('ecm_inv_scan.win.operating_system.country_code', report.operatingsystem.countrycode),
				attribute('ecm_inv_scan.win.operating_system.timezone', report.operatingsystem.timezone),
				attribute('ecm_inv_scan.win.operating_system.ntp_server', report.operatingsystem.ntpserver),
				attribute('ecm_inv_scan.win.operating_system.ntp_server_synchronisation_type', report.operatingsystem.ntpserverSynchronisationType),
				attribute('ecm_inv_scan.win.operating_system.dep_32_bit_applications', to_string(report.operatingsystem.dep32bitapplications)),
				attribute('ecm_inv_scan.win.operating_system.dep_available', to_string(report.operatingsystem.depAvailable)),
				attribute('ecm_inv_scan.win.operating_system.dep_drivers', to_string(report.operatingsystem.depDrivers)),
				attribute('ecm_inv_scan.win.operating_system.dep_support_policy', report.operatingsystem.depSupportpolicy),
				attribute('ecm_inv_scan.win.operating_system.sku', report.operatingsystem.operatingsystemSku),
				attribute('ecm_inv_scan.win.operating_system.installation_type', report.operatingsystem.installationType),
				attribute('ecm_inv_scan.win.operating_system.ubr', report.operatingsystem.ubr),
				attribute('ecm_inv_scan.win.operating_system.edition_id', report.operatingsystem.editionId),
				attribute('ecm_inv_scan.win.operating_system.registered_organization', report.operatingsystem.registeredOrganization),
				attribute('ecm_inv_scan.win.operating_system.registered_owner', report.operatingsystem.registeredOwner),

				attribute('ecm_inv_scan.win.fqdn', report.fqdn),
				
				attribute('ecm_inv_scan.win.machine_info.manufacturer', report.machineinfo.manufacturer),
				attribute('ecm_inv_scan.win.machine_info.product_name', report.machineinfo.productname),
				attribute('ecm_inv_scan.win.machine_info.identifying_number', to_string(report.machineinfo.identifyingnumber)),
				attribute('ecm_inv_scan.win.machine_info.chassis', report.machineinfo.chassis),
				
				attribute('ecm_inv_scan.win.processors.physical_processors', report.processors.physicalProcessors, 'Integer'),
				attribute('ecm_inv_scan.win.processors.logical_processors', report.processors.logicalProcessors, 'Integer'),
				attribute('ecm_inv_scan.win.processors.total_cores', report.processors.totalCores, 'Integer'),
				attribute('ecm_inv_scan.win.processors.cores_per_cpu', report.processors.coresPerCpu, 'Integer'),
				
				attribute('ecm_inv_scan.win.memory.total_size', report.memory.totalsize, 'Integer'),

				attribute('ecm_inv_scan.win.os_configuration.computer_role', report.osconfiguration.computerrole),
				attribute('ecm_inv_scan.win.os_configuration.domain_name', report.osconfiguration.domainname),
				attribute('ecm_inv_scan.win.os_configuration.domain_type', report.osconfiguration.domaintype),
				
				attribute('ecm_inv_scan.win.server_features', report.win32_serverfeature.ServerFeature, 'JSON'),

				attribute('ecm_inv_scan.win.system.name', report.system.name),
				attribute('ecm_inv_scan.win.system.netbios_hostname', report.system.netbiosHostname),
				attribute('ecm_inv_scan.win.system.dns_hostname', report.system.dnsHostname),
				attribute('ecm_inv_scan.win.system.distinguished_name', report.system.distinguishedName),

				attribute('ecm_inv_scan.win.cmdb_info.host_id', report.hostStoredCmdbInfo.hostId),
				attribute('ecm_inv_scan.win.cmdb_info.customer', report.hostStoredCmdbInfo.cust)
			]
		},
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.network.adapter[].{
				tempID: ciid(retrieve('cmdbid'), 'network_adapter', idx(join('_',[retrieve('cmdbid'),'network_adapter']))),
				idMethod: idMethodByIntersect([
					idMethodByUnion([
						[
							idMethodByAttribute(attribute('cmdb.interface.hwaddress', macaddress)),
							idMethodByAttribute(attribute('cmdb.interface.hwaddress', stringReplace(macaddress, ':', '-'))),
							idMethodByAttribute(attribute('cmdb.interface.hwaddress', stringReplace(macaddress, ':', '')))
						],
						map(&idMethodByAttribute(attribute('cmdb.interface.ip', address)), ip[]),
						[
							idMethodByAttribute(attribute('cmdb.interface.name', name), {caseInsensitive: `true`})
						],
						[
							idMethodByData(['ecm_inv_scan.win.network_adapter.mac_address', 'ecm_inv_scan.win.network_adapter.device_id'])
						]
					] | []),
					idMethodByRelatedTempID(['<', 'has_interface'], ciid(retrieve('cmdbid')))
				]),
				attributes: [
					attribute('__name', join(' - ', ['Windows Network Adapter', name || ''])),
					attribute('ecm_inv_scan.win.network_adapter.name', name || ''),
					attribute('ecm_inv_scan.win.network_adapter.description', description),
					attribute('ecm_inv_scan.win.network_adapter.mac_address', macaddress),
					attribute('ecm_inv_scan.win.network_adapter.device_id', deviceId || ''),
					
					attribute('ecm_inv_scan.win.network_adapter.ip', ip, 'JSON'),
					attribute('ecm_inv_scan.win.network_adapter.dns_server', dnsserver, 'JSON')
				]
			}
		} | [].tmp | [],
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.storage.drives[].{
				tempID: ciid(retrieve('cmdbid'), 'storage_drive', idx(join('_',[retrieve('cmdbid'),'storage_drive']))),
				idMethod: idMethodByIntersect([
					idMethodByData(['ecm_inv_scan.win.storage_drive.name', 'ecm_inv_scan.win.storage_drive.device_id', 'ecm_inv_scan.win.storage_drive.serial_number']),
					idMethodByRelatedTempID(['<', 'has_storage_drive'], ciid(retrieve('cmdbid')))
				]),
				attributes: [
					attribute('__name', join(' - ', ['Windows Storage Drive', retrieve('cmdbid'), name || ''])),
					attribute('ecm_inv_scan.win.storage_drive.name', name),
					attribute('ecm_inv_scan.win.storage_drive.device_id', deviceid),
					attribute('ecm_inv_scan.win.storage_drive.interface', interface),
					attribute('ecm_inv_scan.win.storage_drive.serial_number', serialNumber || ''),
					attribute('ecm_inv_scan.win.storage_drive.total_disk_size', to_string(totaldisksize)),
					attribute('ecm_inv_scan.win.storage_drive.total_disk_size_unit', totaldisksizeUnit)
				]
			}
		} | [].tmp | [],
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.storage.drives[].{
				deviceid: store('deviceid', deviceid),
				storageDriveTempID: store('storageDriveTempID', ciid(retrieve('cmdbid'), 'storage_drive', idx(join('_',[retrieve('cmdbid'),'storage_drive_redo_id'])))),
				tmp: partition[].{
					tempID: ciid(retrieve('cmdbid'), retrieve('deviceid'), 'partition', idx(join('_',[retrieve('cmdbid'), retrieve('deviceid'),'partition']))),
					idMethod: idMethodByIntersect([
						idMethodByData(['ecm_inv_scan.win.partition.name']),
						idMethodByRelatedTempID(['<', 'has_partition'], retrieve('storageDriveTempID')),
						idMethodByRelatedTempID(['<', 'has_mounted_partition'], ciid(retrieve('cmdbid')))
					]),
					attributes: [
						attribute('__name', join(' - ', ['Windows Partition', retrieve('cmdbid'), name || ''])),
						attribute('ecm_inv_scan.win.partition.name', name),
						attribute('ecm_inv_scan.win.partition.filesystem', filesystem),
						attribute('ecm_inv_scan.win.partition.size', to_string(size)),
						attribute('ecm_inv_scan.win.partition.size_unit', sizeUnit),
						attribute('ecm_inv_scan.win.partition.freespace', to_string(freespace))
					]
				}
			} | [].tmp | []
		} | [].tmp | []
    ] | [],
    relations: [
		[?document == 'inventory_scan_linux'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: map(&relation(ciid(retrieve('cmdbid')), 'has_interface', ciid(retrieve('cmdbid'), 'network_interface', idx(join('_',[retrieve('cmdbid'),'network_interface_redo'])))), report.network.interfaces[?description != 'lo' && description != 'lo0'])
		} | [].tmp | [],
		[?document == 'inventory_scan_linux'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: map(&relation(ciid(retrieve('cmdbid')), 'has_mounted_partition', ciid(retrieve('cmdbid'), 'linux_partition', idx(join('_',[retrieve('cmdbid'),'linux_partition_redo'])))), not_null(report.storage.partitions[], `[]`))
		} | [].tmp | [],

		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: map(&relation(ciid(retrieve('cmdbid')), 'has_interface', ciid(retrieve('cmdbid'), 'network_adapter', idx(join('_',[retrieve('cmdbid'),'network_adapter_redo'])))), report.network.adapter[])
		} | [].tmp | [],
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: map(&relation(ciid(retrieve('cmdbid')), 'has_storage_drive', ciid(retrieve('cmdbid'), 'storage_drive', idx(join('_',[retrieve('cmdbid'),'storage_drive_redo'])))), report.storage.drives[])
		} | [].tmp | [],
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.storage.drives[].{
				deviceid: store('deviceid', deviceid),
				tmp: map(&relation(ciid(retrieve('cmdbid')), 'has_mounted_partition', ciid(retrieve('cmdbid'), retrieve('deviceid'), 'partition', idx(join('_',[retrieve('cmdbid'), retrieve('deviceid'),'partition_redo'])))), partition[])
			} | [].tmp | []
		} | [].tmp | [],
		[?document == 'inventory_scan_windows'] | [0].data[].{
			cmdbid: store('cmdbid', cmdbid),
			tmp: report.storage.drives[].{
				deviceid: store('deviceid', deviceid),
				storageDriveTempID: store('storageDriveTempID', ciid(retrieve('cmdbid'), 'storage_drive', idx(join('_',[retrieve('cmdbid'),'storage_drive_redo_2'])))),
				tmp: map(&relation(retrieve('storageDriveTempID'), 'has_partition', ciid(retrieve('cmdbid'), retrieve('deviceid'), 'partition', idx(join('_',[retrieve('cmdbid'), retrieve('deviceid'),'partition_redo_2'])))), partition[])
			} | [].tmp | []
		} | [].tmp | []
	] | []
}

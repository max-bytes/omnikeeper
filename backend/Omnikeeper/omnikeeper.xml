<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omnikeeper</name>
    </assembly>
    <members>
        <member name="P:Omnikeeper.Controllers.OData.MyODataRoutingApplicationModelProvider.Order">
            <summary>
            Gets the order value for determining the order of execution of providers.
            </summary>
        </member>
        <member name="P:Omnikeeper.Controllers.OData.MyODataRoutingMatcherPolicy.Order">
            <summary>
            Gets a value that determines the order of this policy.
            </summary>
        </member>
        <member name="M:Omnikeeper.Controllers.OData.MyODataRoutingMatcherPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})">
            <summary>
            Returns a value that indicates whether the matcher applies to any endpoint in endpoints.
            </summary>
            <param name="endpoints">The set of candidate values.</param>
            <returns>true if the policy applies to any endpoint in endpoints, otherwise false.</returns>
        </member>
        <member name="M:Omnikeeper.Controllers.OData.MyODataRoutingMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)">
            <summary>
            Applies the policy to the CandidateSet.
            </summary>
            <param name="httpContext">The context associated with the current request.</param>
            <param name="candidates">The CandidateSet.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:Omnikeeper.Controllers.OData.TraitEntityController.SetSelectExpandClauseOnODataFeature(Microsoft.OData.UriParser.ODataPath,Microsoft.OData.Edm.IEdmType)">
            <summary>
            Set the <see cref="T:Microsoft.OData.UriParser.SelectExpandClause"/> on ODataFeature.
            Without this, the response does not contains navigation property included in $expand
            </summary>
            <param name="odataPath">OData Path from the Request</param>
            <param name="edmEntityType">Entity type on which the query is being performed</param>
            <returns></returns>
        </member>
        <member name="M:Omnikeeper.Model.ChangesetModel.ArchiveUnusedChangesetsOlderThan(System.DateTimeOffset,Omnikeeper.Base.Utils.ModelContext.IModelContext)">
            <summary>
            approach: only archive a changeset when ALL of its changes can be archived... which means that ALL of its changes to attribute and relations can be archived
            this is the case when the timestamp of the attribute/relation is older than the threshold AND the attribute/relation is NOT part of the latest/current data
            we rely on foreign key constraints and cascading deletes to delete the corresponding attributes and relations
            </summary>
            <param name="threshold"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Omnikeeper.Model.EffectiveTraitModel.FilterCIsWithTraitSOP(System.Collections.Generic.IEnumerable{Omnikeeper.Base.Entity.MergedCI},System.ValueTuple{Omnikeeper.Base.Entity.ITrait,System.Boolean}[][],Omnikeeper.Base.Entity.LayerSet,Omnikeeper.Base.Utils.ModelContext.IModelContext,Omnikeeper.Base.Utils.TimeThreshold)">
            <summary>
            traitSOP is a sum of products of trait requirements
            see https://en.wikipedia.org/wiki/Disjunctive_normal_form
            </summary>
        </member>
        <member name="M:Omnikeeper.Startup.MySignalRSink`2.#ctor(System.IFormatProvider,System.Boolean,System.IServiceProvider,System.String[],System.String[],System.String[])">
            <summary>
            Sink constructor.
            </summary>
            <param name="formatProvider">The format provider with which the events are formatted.</param>
            <param name="sendAsString">A bool to decide as what the log should be send.</param>
            <param name="serviceProvider">The current serviceProvider.</param>
            <param name="groups">The groups where the events are sent.</param>
            <param name="userIds">The users to where the events are sent.</param>
            <param name="excludedConnectionIds">The client ids to exclude.</param>
        </member>
        <member name="M:Omnikeeper.Startup.MySignalRSink`2.Emit(Serilog.Events.LogEvent)">
            <summary>
            Emit a log event to the registered clients
            </summary>
            <param name="logEvent">The event to emit</param>
        </member>
        <member name="M:Omnikeeper.Startup.IHub.SendLogAsString(System.String)">
            <summary>
            Send a message as a string
            </summary>
            <param name="message">The message you want to send.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Omnikeeper.Startup.IHub.SendLogAsObject(System.Object)">
            <summary>
            Send a message as an object
            </summary>
            <param name="messageObject">The message you want to send.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.GetGridViewContexts">
            <summary>
            Returns a list of contexts for grid view.
            </summary>
            <returns>200</returns>
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.GetGridViewContext(System.String)">
            <summary>
            Returns a single context in full
            </summary>
            <returns>200</returns>
            <response code="400">If the name was not found or any other error occurred</response>  
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.AddContext(Omnikeeper.GridView.Request.AddContextRequest)">
            <summary>
            Adds new context
            </summary>
            <param name="context"></param>
            <returns>Created context</returns>
            <response code="201">Returns the newly created context</response>
            <response code="400">If creating context fails</response>  
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.EditContext(System.String,Omnikeeper.GridView.Request.EditContextRequest)">
            <summary>
            Edits specific context
            </summary>
            <param name="name"></param>
            <param name="editContextRequest"></param>
            <returns>Status indication request status</returns>
            <response code="200">If request is successful</response>
            <response code="400">If editing the context fails</response>  
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.DeleteContext(System.String)">
            <summary>
            Deletes specific context
            </summary>
            <param name="name"></param>
            <returns>Status indication request status</returns>
            <response code="200">If request is successful</response>
            <response code="400">If editing the context fails</response>  
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.GetSchema(System.String)">
            <summary>
            Returns grid view schema for specific context
            </summary>
            <param name="context"></param>
            <returns>Returns schema object for specififc context</returns>
            <response code="200"></response>
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.GetData(System.String)">
            <summary>
            Returns grid view data for specific context
            </summary>
            <param name="context"></param>
            <returns>An object which contains rows for grid view</returns>
            <response code="200">If request is successful</response>
            <response code="400">If trait is not found</response>
        </member>
        <member name="M:LandscapeRegistry.GridView.GridViewController.ChangeData(System.String,Omnikeeper.GridView.Request.ChangeDataRequest)">
            <summary>
            Saves grid view row changes and returns change results
            </summary>
            <param name="context"></param>
            <param name="changes"></param>
            <returns>A list of changes or an error</returns>
            <response code="200">If request is successful</response>
            <response code="404">If saving changes fails</response>  
        </member>
    </members>
</doc>

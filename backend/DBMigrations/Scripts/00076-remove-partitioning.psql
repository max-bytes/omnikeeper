-- UN-partition table attribute by recreating it and then copying the data
ALTER TABLE public.attribute rename to attribute_old;
CREATE TABLE public.attribute
(
    name text COLLATE pg_catalog."default" NOT NULL,
    ci_id uuid NOT NULL,
    type attributevaluetype NOT NULL DEFAULT 'text'::attributevaluetype,
    value_text text COLLATE pg_catalog."default" NOT NULL,
    removed boolean NOT NULL DEFAULT false,
    "timestamp" timestamp with time zone NOT NULL,
    id uuid NOT NULL,
    changeset_id uuid NOT NULL,
    value_control bytea NOT NULL DEFAULT '\x'::bytea,
    value_binary bytea NOT NULL DEFAULT '\x'::bytea,
    layer_id text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT attribute_pkey PRIMARY KEY (id),
    CONSTRAINT u_name_ci_layer_changeset UNIQUE (name, ci_id, layer_id, changeset_id),
    CONSTRAINT f_anchor FOREIGN KEY (ci_id)
        REFERENCES public.ci (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE RESTRICT,
    CONSTRAINT f_changeset FOREIGN KEY (changeset_id)
        REFERENCES public.changeset (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT f_layer FOREIGN KEY (layer_id)
        REFERENCES public.layer (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE RESTRICT
);
ALTER TABLE public.attribute
    OWNER to postgres;
CREATE INDEX
    ON public.attribute USING btree
    (changeset_id ASC NULLS LAST)
    TABLESPACE pg_default;
CREATE INDEX
    ON public.attribute USING btree
    (ci_id ASC NULLS LAST)
    TABLESPACE pg_default;

INSERT INTO public.attribute (name, ci_id, type, value_text, removed, "timestamp", id, changeset_id, value_control, value_binary, layer_id) 
SELECT name, ci_id, type, value_text, removed, "timestamp", id, changeset_id, value_control, value_binary, layer_id FROM public.attribute_old;

DROP TABLE public.attribute_old;


-- UN-partition table relation by recreating it and then copying the data
ALTER TABLE public.relation rename to relation_old;
CREATE TABLE public.relation
(
    from_ci_id uuid NOT NULL,
    to_ci_id uuid NOT NULL,
    predicate_id text COLLATE pg_catalog."default" NOT NULL,
    removed boolean NOT NULL DEFAULT false,
    "timestamp" timestamp with time zone NOT NULL,
    id uuid NOT NULL,
    changeset_id uuid NOT NULL,
    layer_id text COLLATE pg_catalog."default" NOT NULL,
    mask boolean NOT NULL DEFAULT false,
    CONSTRAINT relation_pkey PRIMARY KEY (id),
    CONSTRAINT u_from_ci_to_ci_predicate_layer_changeset UNIQUE (from_ci_id, to_ci_id, predicate_id, layer_id, changeset_id),
    CONSTRAINT f_changeset FOREIGN KEY (changeset_id)
        REFERENCES public.changeset (id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT f_from_id FOREIGN KEY (from_ci_id)
        REFERENCES public.ci (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE RESTRICT,
    CONSTRAINT f_layer FOREIGN KEY (layer_id)
        REFERENCES public.layer (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE RESTRICT,
    CONSTRAINT f_to_ci FOREIGN KEY (to_ci_id)
        REFERENCES public.ci (id) MATCH SIMPLE
        ON UPDATE RESTRICT
        ON DELETE RESTRICT
);
ALTER TABLE public.relation
    OWNER to postgres;

CREATE INDEX
    ON public.relation USING btree
    (changeset_id ASC NULLS LAST)
    TABLESPACE pg_default;
CREATE INDEX
    ON public.relation USING btree
    (from_ci_id ASC NULLS LAST)
    TABLESPACE pg_default;
CREATE INDEX
    ON public.relation USING btree
    (to_ci_id ASC NULLS LAST)
    TABLESPACE pg_default;
	
INSERT INTO public.relation (from_ci_id, to_ci_id, predicate_id, removed, "timestamp", "id", changeset_id, layer_id, mask) 
SELECT from_ci_id, to_ci_id, predicate_id, removed, "timestamp", "id", changeset_id, layer_id, mask FROM public.relation_old;
DROP TABLE public.relation_old;

DROP TABLE public.partition;
